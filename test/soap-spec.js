// Generated by CoffeeScript 1.10.0
(function() {
  var assert, encoded, failure, fs, nock, soap, success, types, wsdl;

  assert = require('chai').assert;

  soap = require('../lib/soap');

  nock = require('nock');

  types = require('leadconduit-types');

  fs = require('fs');

  wsdl = fs.readFileSync(__dirname + "/soap-wsdl.xml");

  success = fs.readFileSync(__dirname + "/soap-success.xml");

  failure = fs.readFileSync(__dirname + "/soap-failure.xml");

  encoded = fs.readFileSync(__dirname + "/soap-encoded.xml");

  describe('Outbound SOAP', function() {
    beforeEach(function() {
      return this.wsdl = nock('http://donkey').get('/login/ws/ws.asmx?WSDL').reply(200, wsdl, {
        'Content-Type': 'text/xml'
      });
    });
    afterEach(function() {
      var ref;
      if ((ref = this.service) != null) {
        ref.done();
      }
      return nock.cleanAll();
    });
    it('should error on unsupported function', function(done) {
      var vars;
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'someUnsupportedFunction'
      };
      return soap.handle(vars, function(err) {
        assert.equal(err.message, 'Unsupported SOAP function specified');
        return done();
      });
    });
    it('should use basic auth credentials', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx').basicAuth({
        user: 'bob',
        pass: 'sekret'
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        basic_username: 'bob',
        basic_password: 'sekret'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should use ws credentials', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<wsse:Username>bob</wsse:Username>') > 0 && body.indexOf('<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText">sekret</wsse:Password>') > 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        wss_username: 'bob',
        wss_password: 'sekret'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should digest ws password', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<wsse:Username>bob</wsse:Username>') > 0 && body.indexOf('<wsse:Password Type="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordDigest">') > 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        wss_username: 'bob',
        wss_password: 'sekret',
        wss_digest_password: true
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should use bearer token', function(done) {
      var vars;
      this.service = nock('http://donkey', {
        reqheaders: {
          Authorization: function(value) {
            return value === 'Bearer crunchy';
          }
        }
      }).post('/login/ws/ws.asmx').reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        bearer_token: 'crunchy'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should pass arguments', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<FirstName>Bob</FirstName>') >= 0 && body.indexOf('<ZipCode>78704-1234</ZipCode>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        'url': 'http://donkey/login/ws/ws.asmx?WSDL',
        'function': 'AddLead',
        'arg.Lead.FirstName': 'Bob',
        'arg.Lead.ZipCode': types.postal_code.parse('78704-1234')
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should compact array arguments', function(done) {
      var vars;
      vars = {
        'url': 'http://donkey/login/ws/ws.asmx?WSDL',
        'function': 'AddLead',
        'arg.Lead.bar.0': 'bip',
        'arg.Lead.bar.1': null,
        'arg.Lead.bar.2': 'bap'
      };
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        var ref;
        return body.indexOf('<bar>bip</bar>') >= 0 && body.indexOf('<bar>bap</bar>') >= 0 && ((ref = body.match(/\<bar\>/g)) != null ? ref.length : void 0) === 2;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should send data as ASCII when told to', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<FirstName>Bob</FirstName>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        'url': 'http://donkey/login/ws/ws.asmx?WSDL',
        'function': 'AddLead',
        'send_ascii': types.boolean.parse('true'),
        'arg.Lead.FirstName': 'Böb'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should send data as original UTF-8 when told to', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<FirstName>Böb</FirstName>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        'url': 'http://donkey/login/ws/ws.asmx?WSDL',
        'function': 'AddLead',
        'send_ascii': types.boolean.parse('false'),
        'arg.Lead.FirstName': 'Böb'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should encode XML into first string argument', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('&lt;FirstName&gt;Bob&lt;/FirstName&gt;') >= 0 && body.indexOf('&lt;ZipCode&gt;78704-1234&lt;/ZipCode&gt;') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        'url': 'http://donkey/login/ws/ws.asmx?WSDL',
        'function': 'AddLeadXML',
        'arg.LeadXML.Lead.FirstName': 'Bob',
        'arg.LeadXML.Lead.ZipCode': types.postal_code.parse('78704-1234')
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should not encode text in a CDATA section', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<![CDATA[Hello World! & <Hello Me!>]]>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        'url': 'http://donkey/login/ws/ws.asmx?WSDL',
        'function': 'AddLeadXML',
        'arg.LeadXML': '<![CDATA[Hello World! & <Hello Me!>]]>'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should timeout', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx').socketDelay(10000).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        timeout_seconds: 5
      };
      return soap.handle(vars, function(err, event) {
        assert.equal(err.message, 'ESOCKETTIMEDOUT');
        assert.isUndefined(event);
        return done();
      });
    });
    it('should not timeout', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx').socketDelay(10000).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        timeout_seconds: 12
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should default to SOAP 1.1', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should use SOAP 1.2', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        version: '1.2'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should use SOAP 1.1', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        version: '1.1'
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });
    it('should set headers', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<SessionHeader xmlns="urn:foo.bar"><sessionId>88774421</sessionId></SessionHeader>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        soap_header: {
          'SessionHeader.sessionId': 88774421,
          'SessionHeader@xmlns': 'urn:foo.bar'
        }
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });

    it('should set multiple headers', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.match(/<SessionHeader xmlns="urn:foo.bar"><sessionId>88774421<\/sessionId><\/SessionHeader><OtherHeader xmlns="urn:foo.other"><Id>4321<\/Id><\/OtherHeader>/m) >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        soap_header: {
          'SessionHeader.sessionId': 88774421,
          'SessionHeader@xmlns': 'urn:foo.bar',
          'OtherHeader.Id': 4321,
          'OtherHeader@xmlns': 'urn:foo.other'
        }
      };
      return soap.handle(vars, function(err, event) {
        if (err) {
          return done(err);
        }
        assert.equal(event.outcome, 'success');
        return done();
      });
    });

    it('should have a request body with the root element namespace prefix and xlmns attributes when specified', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<cal:AddLead xmlns:cal="http://donkey/ws.asmx/"></cal:AddLead>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        root_namespace_prefix: 'cal',
        root_xmlns_attribute_name: 'xmlns:cal',
        root_xmlns_attribute_value: 'http://donkey/ws.asmx/'
      };
      return soap.handle(vars, (function(_this) {
        return function(err, event) {
          if (err) {
            return done(err);
          }
          assert.equal(event.outcome, 'success');
          return done();
        };
      })(this));
    });
    it('should not fail when the root element namespace prefix is defined but the xlmns attributes name/value pair are not specified', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<cal:AddLead xmlns="http://donkey/ws.asmx/"></cal:AddLead>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        root_namespace_prefix: 'cal'
      };
      return soap.handle(vars, (function(_this) {
        return function(err, event) {
          if (err) {
            return done(err);
          }
          assert.equal(event.outcome, 'success');
          return done();
        };
      })(this));
    });
    it('should not fail when the root element namespace prefix is not defined but the root element xlmns attributes name/value pairs are specified', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<AddLead xmlns:cal="http://donkey/ws.asmx/"></AddLead>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead',
        root_xmlns_attribute_name: 'xmlns:cal',
        root_xmlns_attribute_value: 'http://donkey/ws.asmx/'
      };
      return soap.handle(vars, (function(_this) {
        return function(err, event) {
          if (err) {
            return done(err);
          }
          assert.equal(event.outcome, 'success');
          return done();
        };
      })(this));
    });
    it('should not fail when the root element namespace prefix and xlmns attributes name/value pairs are not specified', function(done) {
      var vars;
      this.service = nock('http://donkey').post('/login/ws/ws.asmx', function(body) {
        return body.indexOf('<AddLead xmlns="http://donkey/ws.asmx/"></AddLead>') >= 0;
      }).reply(200, success, {
        'Content-Type': 'text/xml'
      });
      vars = {
        url: 'http://donkey/login/ws/ws.asmx?WSDL',
        "function": 'AddLead'
      };
      return soap.handle(vars, (function(_this) {
        return function(err, event) {
          if (err) {
            return done(err);
          }
          assert.equal(event.outcome, 'success');
          return done();
        };
      })(this));
    });
    describe('response', function() {
      beforeEach(function() {
        this.service = nock('http://donkey').post('/login/ws/ws.asmx').reply(200, success, {
          'Content-Type': 'text/xml'
        });
        return this.vars = {
          url: 'http://donkey/login/ws/ws.asmx?WSDL',
          "function": 'AddLead'
        };
      });
      it('should append data', function(done) {
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.deepEqual(event.AddLeadResult, {
              Result: true,
              Message: 'some message',
              LeadId: 12345,
              Empty: null,
              Multi: {
                Foo: ['1', '2']
              }
            });
            return done();
          };
        })(this));
      });
      it('should default to success without search term', function(done) {
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should default to failure per outcome on match', function(done) {
        this.vars.outcome_on_match = 'failure';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should find search term with exact match', function(done) {
        this.vars.outcome_search_term = 'some message';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find search term with exact match at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = 'some message';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should not find search term', function(done) {
        this.vars.outcome_search_term = 'bar';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should not find search term at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = 'foo';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should not find search term at different path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Result';
        this.vars.outcome_search_term = 'some message';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should return failure on match per outcome on match', function(done) {
        this.vars.outcome_search_term = 'some message';
        this.vars.outcome_on_match = 'failure';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should return failure on match per outcome on match at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = 'some message';
        this.vars.outcome_on_match = 'failure';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should find search term with partial match', function(done) {
        this.vars.outcome_search_term = 'some';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find search term with partial match at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = 'some';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find search term with regex', function(done) {
        this.vars.outcome_search_term = '[a-z]{4}\\s[a-z]{7}';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find search term with regex at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = '[a-z]{4}\\s[a-z]{7}';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find search term with regex including slashes', function(done) {
        this.vars.outcome_search_term = '/[a-z]{4}\\s[a-z]{7}/';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find search term with regex with slashes at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = '/[a-z]{4}\\s[a-z]{7}/';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should not error on invalid regex search term', function(done) {
        this.vars.outcome_search_term = '/[/';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should not error on invalid regex search term at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = '/[/';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should find upper case search term', function(done) {
        this.vars.outcome_search_term = 'SOME MESSAGE';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find lower case search term', function(done) {
        this.vars.outcome_search_term = 'some message';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find upper case search term at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = 'SOME MESSAGE';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should find lower case search term at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = 'some message';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'success');
            return done();
          };
        })(this));
      });
      it('should not find match', function(done) {
        this.vars.outcome_search_term = 'whatever';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should not find match at path', function(done) {
        this.vars.outcome_search_path = 'AddLeadResult.Message';
        this.vars.outcome_search_term = 'whatever';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            return done();
          };
        })(this));
      });
      it('should parse reason', function(done) {
        this.vars.outcome_search_term = 'false';
        this.vars.reason_path = 'AddLeadResult.Message';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            assert.equal(event.reason, 'some message');
            return done();
          };
        })(this));
      });
      it('should discard empty reason', function(done) {
        this.vars.outcome_search_term = 'false';
        this.vars.reason_path = 'AddLeadResult.Empty';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            assert.isUndefined(event.reason);
            return done();
          };
        })(this));
      });
      it('should parse multiple reasons', function(done) {
        this.vars.outcome_search_term = 'false';
        this.vars.reason_path = 'AddLeadResult.Multi.Foo';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            assert.equal(event.reason, '1, 2');
            return done();
          };
        })(this));
      });
      it('should return default reason', function(done) {
        this.vars.outcome_search_term = 'false';
        this.vars.default_reason = 'just because';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            assert.equal(event.reason, 'just because');
            return done();
          };
        })(this));
      });
      it('should fail to parse reason', function(done) {
        this.vars.outcome_search_term = 'false';
        this.vars.reason_path = 'AddLeadResult.Bogus';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            assert.isUndefined(event.reason);
            return done();
          };
        })(this));
      });
      it('should use default reason on failure to parse reason', function(done) {
        this.vars.outcome_search_term = 'false';
        this.vars.default_reason = 'just because';
        this.vars.reason_path = 'AddLeadResult.Bogus';
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.equal(event.outcome, 'failure');
            assert.equal(event.reason, 'just because');
            return done();
          };
        })(this));
      });
      return it('should parse encoded XML encoded in string result', function(done) {
        nock.cleanAll();
        this.wsdl = nock('http://donkey').get('/login/ws/ws.asmx?WSDL').reply(200, wsdl, {
          'Content-Type': 'text/xml'
        });
        this.service = nock('http://donkey').post('/login/ws/ws.asmx').reply(200, encoded, {
          'Content-Type': 'text/xml'
        });
        this.vars = {
          url: 'http://donkey/login/ws/ws.asmx?WSDL',
          "function": 'AddLead'
        };
        return soap.handle(this.vars, (function(_this) {
          return function(err, event) {
            if (err) {
              return done(err);
            }
            assert.deepEqual(event.AddLeadXMLResult, {
              Response: {
                Result: 'true',
                Message: 'some message',
                LeadId: '12345',
                Empty: '',
                Multi: {
                  Foo: ['1', '2']
                }
              }
            });
            return done();
          };
        })(this));
      });
    });
    return describe('validation', function() {
      it('should require valid URL', function() {
        assert.equal(soap.validate({}), 'URL is required');
        return assert.equal(soap.validate({
          url: 'donkey'
        }), 'URL must be valid');
      });
      it('should require function', function() {
        assert.equal(soap.validate({
          url: 'http://foo.com'
        }), 'Function is required');
        return assert.equal(soap.validate({
          url: 'http://foo.com',
          "function": 'donkey/kong'
        }), 'Function must have valid name');
      });
      it('should require valid search outcome', function() {
        return assert.equal(soap.validate({
          url: 'http://foo.com',
          outcome_on_match: 'donkey'
        }), "Outcome on match must be 'success', 'failure', or 'error'");
      });
      it('should pass validation', function() {
        return assert.isUndefined(soap.validate({
          url: 'http://foo.com',
          "function": 'whatever'
        }));
      });
      return it('should require valid SOAP version', function() {
        return assert.equal(soap.validate({
          url: 'http://foo.com',
          "function": 'whatever',
          version: '0'
        }), 'Must be valid SOAP version: 1.1 or 1.2');
      });
    });
  });

}).call(this);
